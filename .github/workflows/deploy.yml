name: Deploy

on:
  release:
    types: [published]
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/pitchconnect

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.deploy-check.outputs.should_deploy }}
      environment: ${{ steps.deploy-check.outputs.environment }}
      version: ${{ steps.deploy-check.outputs.version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine deployment parameters
        id: deploy-check
        run: |
          # Determine environment
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            FORCE_DEPLOY="${{ github.event.inputs.force_deploy }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            ENVIRONMENT="production"
            FORCE_DEPLOY="true"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENVIRONMENT="production"
            FORCE_DEPLOY="false"
          else
            ENVIRONMENT="staging"
            FORCE_DEPLOY="false"
          fi
          
          # Determine version
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="latest"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          
          echo "🚀 Deployment Configuration:"
          echo "Environment: $ENVIRONMENT"
          echo "Version: $VERSION"
          echo "Force Deploy: $FORCE_DEPLOY"

  verify-images:
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.should_deploy == 'true'
    permissions:
      contents: read
      packages: read

    strategy:
      fail-fast: false
      matrix:
        service: [fogis-api-client-service, team-logo-combiner, match-list-processor, match-list-change-detector, fogis-calendar-phonebook-sync, google-drive-service]

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify image exists
        id: image-verify
        run: |
          IMAGE_TAG="${{ needs.prepare-deployment.outputs.version }}"
          IMAGE_NAME="${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:$IMAGE_TAG"
          
          echo "Verifying image: $IMAGE_NAME"
          
          if docker manifest inspect "$IMAGE_NAME" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Image ${{ matrix.service }}:$IMAGE_TAG exists"
            
            # Get image details
            docker manifest inspect "$IMAGE_NAME" | jq -r '.manifests[] | select(.platform.architecture) | .platform.architecture' | sort | uniq > architectures.txt
            ARCHITECTURES=$(cat architectures.txt | tr '\n' ',' | sed 's/,$//')
            echo "architectures=$ARCHITECTURES" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❌ Image ${{ matrix.service }}:$IMAGE_TAG not found"
          fi

      - name: Generate verification summary
        run: |
          echo "## 🔍 Image Verification" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.prepare-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.image-verify.outputs.exists }}" = "true" ]; then
            echo "**Status:** ✅ Image verified" >> $GITHUB_STEP_SUMMARY
            echo "**Architectures:** ${{ steps.image-verify.outputs.architectures }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ❌ Image not found" >> $GITHUB_STEP_SUMMARY
          fi

  deploy-to-registry:
    runs-on: ubuntu-latest
    needs: [prepare-deployment, verify-images]
    if: needs.prepare-deployment.outputs.should_deploy == 'true'
    environment: ${{ needs.prepare-deployment.outputs.environment }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment manifests
        run: |
          VERSION="${{ needs.prepare-deployment.outputs.version }}"
          ENVIRONMENT="${{ needs.prepare-deployment.outputs.environment }}"
          
          echo "Updating deployment manifests for $ENVIRONMENT environment..."
          
          # Update docker-compose.yml with new version
          if [ -f "fogis-deployment/docker-compose.yml" ]; then
            sed -i "s|ghcr.io/pitchconnect/\([^:]*\):.*|ghcr.io/pitchconnect/\1:$VERSION|g" fogis-deployment/docker-compose.yml
            echo "✅ Updated docker-compose.yml with version $VERSION"
          fi
          
          # Create deployment summary
          cat > deployment-summary.md << EOF
          # 🚀 Deployment Summary
          
          **Environment:** $ENVIRONMENT
          **Version:** $VERSION
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Triggered by:** ${{ github.event_name }}
          
          ## 📦 Services Deployed
          - fogis-api-client-service:$VERSION
          - team-logo-combiner:$VERSION
          - match-list-processor:$VERSION
          - match-list-change-detector:$VERSION
          - fogis-calendar-phonebook-sync:$VERSION
          - google-drive-service:$VERSION
          
          ## 🏗️ Architecture Support
          - ✅ AMD64 (Intel/AMD processors)
          - ✅ ARM64 (Apple Silicon, ARM servers)
          
          ## 🔗 Registry
          All images available at: ghcr.io/pitchconnect/*
          EOF

      - name: Create deployment artifact
        run: |
          # Create deployment package
          mkdir -p deployment-artifacts
          cp -r fogis-deployment/* deployment-artifacts/ 2>/dev/null || true
          cp deployment-summary.md deployment-artifacts/
          
          # Create version file
          echo "${{ needs.prepare-deployment.outputs.version }}" > deployment-artifacts/VERSION
          echo "${{ needs.prepare-deployment.outputs.environment }}" > deployment-artifacts/ENVIRONMENT

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ needs.prepare-deployment.outputs.environment }}-${{ needs.prepare-deployment.outputs.version }}
          path: deployment-artifacts/
          retention-days: 30

      - name: Generate deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.prepare-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.prepare-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Deployment completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Artifacts:** Deployment package uploaded" >> $GITHUB_STEP_SUMMARY

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [prepare-deployment, verify-images, deploy-to-registry]
    if: always() && needs.prepare-deployment.outputs.should_deploy == 'true'
    permissions:
      contents: read

    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy-to-registry.result }}" = "success" ]; then
            echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** ${{ needs.prepare-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** ${{ needs.prepare-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**All services deployed successfully to GHCR**" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Deployment Failed!" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** ${{ needs.prepare-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** ${{ needs.prepare-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Please check the deployment logs for details**" >> $GITHUB_STEP_SUMMARY
          fi
