name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  pre-commit-checks:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        service:
          - name: fogis-api-client
            path: fogis-api-client-python
          - name: team-logo-combiner
            path: team-logo-combiner
          - name: match-list-processor
            path: match-list-processor
          - name: match-list-change-detector
            path: match-list-change-detector
          - name: fogis-calendar-phonebook-sync
            path: fogis-calendar-phonebook-sync
          - name: google-drive-service
            path: google-drive-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if service has Python code
        id: python-check
        run: |
          if find "${{ matrix.service.path }}" -name "*.py" -type f | head -1 | grep -q .; then
            echo "has_python=true" >> $GITHUB_OUTPUT
            echo "✅ Python code found in ${{ matrix.service.name }}"
          else
            echo "has_python=false" >> $GITHUB_OUTPUT
            echo "⚠️ No Python code found in ${{ matrix.service.name }}"
          fi

      - name: Set up Python (with cache)
        if: steps.python-check.outputs.has_python == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Python (without cache)
        if: steps.python-check.outputs.has_python == 'false'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        if: steps.python-check.outputs.has_python == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 bandit mypy
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi

      - name: Run Black formatting check
        if: steps.python-check.outputs.has_python == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Running Black formatting check..."
          python -m black --check --line-length=88 . || echo "Black formatting issues found"

      - name: Run isort import sorting check
        if: steps.python-check.outputs.has_python == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Running isort import sorting check..."
          python -m isort --check-only --profile=black --line-length=88 . || echo "Import sorting issues found"

      - name: Run flake8 linting
        if: steps.python-check.outputs.has_python == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Running flake8 linting..."
          python -m flake8 --max-line-length=88 --extend-ignore=E203,W503 . || echo "Linting issues found"

      - name: Run bandit security scan
        if: steps.python-check.outputs.has_python == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Running bandit security scan..."
          python -m bandit -r . -f json -o bandit-results.json || echo "Security issues found"
          if [ -f bandit-results.json ]; then
            echo "Bandit scan completed - results saved"
          fi

      - name: Run mypy type checking
        if: steps.python-check.outputs.has_python == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Running mypy type checking..."
          python -m mypy --ignore-missing-imports --no-strict-optional . || echo "Type checking issues found"

      - name: Generate quality summary
        run: |
          echo "## 🔍 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ matrix.service.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Path:** ${{ matrix.service.path }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.python-check.outputs.has_python }}" = "true" ]; then
            echo "**Status:** ✅ Quality checks executed" >> $GITHUB_STEP_SUMMARY
            echo "**Checks:** Black, isort, flake8, bandit, mypy" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ⚠️ No Python code found" >> $GITHUB_STEP_SUMMARY
          fi

  global-pre-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run global pre-commit hooks
        run: |
          if [ -f .pre-commit-config.yaml ]; then
            echo "Running global pre-commit hooks..."
            pre-commit run --all-files || echo "Pre-commit issues found"
          else
            echo "No global pre-commit configuration found"
          fi

      - name: Check YAML files
        run: |
          echo "Checking YAML files..."
          find . -name "*.yml" -o -name "*.yaml" | xargs -I {} python -c "import yaml; yaml.safe_load(open('{}'))" || echo "YAML syntax issues found"

      - name: Check JSON files
        run: |
          echo "Checking JSON files..."
          find . -name "*.json" | xargs -I {} python -c "import json; json.load(open('{}'))" || echo "JSON syntax issues found"

      - name: Generate global summary
        run: |
          echo "## 🌐 Global Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-commit:** Global hooks executed" >> $GITHUB_STEP_SUMMARY
          echo "**YAML/JSON:** Syntax validation completed" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Global quality checks completed" >> $GITHUB_STEP_SUMMARY

  quality-summary:
    runs-on: ubuntu-latest
    needs: [pre-commit-checks, global-pre-commit]
    if: always()
    permissions:
      contents: read

    steps:
      - name: Quality Results Summary
        run: |
          echo "## 📊 Overall Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "**Service Checks:** ${{ needs.pre-commit-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Global Checks:** ${{ needs.global-pre-commit.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.pre-commit-checks.result }}" = "success" ] && [ "${{ needs.global-pre-commit.result }}" = "success" ]; then
            echo "**Overall Status:** ✅ All quality checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Overall Status:** ⚠️ Some quality checks failed" >> $GITHUB_STEP_SUMMARY
          fi
