name: Nightly Comprehensive Testing

on:
  schedule:
    - cron: '0 1 * * *'  # 1:00 AM UTC daily
  workflow_dispatch:
    inputs:
      python_versions:
        description: 'Python versions to test (comma-separated)'
        required: false
        default: '3.9,3.10,3.11'
        type: string
      force_run:
        description: 'Force run even if no recent commits'
        required: false
        default: false
        type: boolean

env:
  DEFAULT_PYTHON_VERSIONS: '3.9,3.10,3.11'

jobs:
  check-recent-commits:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.commit-check.outputs.should_run }}
      commit_count: ${{ steps.commit-check.outputs.commit_count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 50  # Fetch last 50 commits

      - name: Check for recent commits
        id: commit-check
        run: |
          # Check if there are commits in the last 24 hours
          RECENT_COMMITS=$(git log --since="24 hours ago" --oneline | wc -l)
          echo "commit_count=$RECENT_COMMITS" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event.inputs.force_run }}" = "true" ] || [ "$RECENT_COMMITS" -gt 0 ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Will run nightly tests (Recent commits: $RECENT_COMMITS)"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping nightly tests (No recent commits)"
          fi

  comprehensive-tests:
    runs-on: ubuntu-latest
    needs: check-recent-commits
    if: needs.check-recent-commits.outputs.should_run == 'true'
    permissions:
      contents: read
      issues: write

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        service:
          - name: fogis-api-client
            path: fogis-api-client-python
          - name: team-logo-combiner
            path: team-logo-combiner
          - name: match-list-processor
            path: match-list-processor
          - name: match-list-change-detector
            path: match-list-change-detector
          - name: fogis-calendar-phonebook-sync
            path: fogis-calendar-phonebook-sync
          - name: google-drive-service
            path: google-drive-service

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check service structure
        id: service-check
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Checking ${{ matrix.service.name }} structure..."

          # Check for Python files
          if find . -name "*.py" -type f | head -1 | grep -q .; then
            echo "has_python=true" >> $GITHUB_OUTPUT
          else
            echo "has_python=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python ${{ matrix.python-version }} (with cache)
        if: steps.service-check.outputs.has_python == 'true'
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Set up Python ${{ matrix.python-version }} (without cache)
        if: steps.service-check.outputs.has_python == 'false'
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Complete service structure check
        id: service-check-complete
        working-directory: ${{ matrix.service.path }}
        run: |
          # Check for tests
          if [ -d "tests" ] || find . -name "test_*.py" -type f | head -1 | grep -q .; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi

          # Check for requirements
          if [ -f "requirements.txt" ]; then
            echo "has_requirements=true" >> $GITHUB_OUTPUT
          else
            echo "has_requirements=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.service-check.outputs.has_python == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          python -m pip install --upgrade pip

          # Install requirements if they exist
          if [ "${{ steps.service-check-complete.outputs.has_requirements }}" = "true" ]; then
            pip install -r requirements.txt
          fi
          
          # Install development dependencies
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
          
          # Install testing and quality tools
          pip install pytest pytest-cov pytest-mock pytest-asyncio
          pip install black isort flake8 bandit mypy pylint
          pip install safety pip-audit

      - name: Run comprehensive tests
        if: steps.service-check-complete.outputs.has_tests == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Running comprehensive tests for ${{ matrix.service.name }} on Python ${{ matrix.python-version }}"
          
          # Run tests with coverage
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing \
            --cov-fail-under=70 || echo "Tests completed with issues"

      - name: Run deep code quality analysis
        if: steps.service-check.outputs.has_python == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Running deep code quality analysis..."
          
          # Extended linting with pylint
          python -m pylint --output-format=json --reports=no . > pylint-results.json || echo "Pylint completed"
          
          # Type checking with mypy
          python -m mypy --ignore-missing-imports --no-strict-optional . || echo "MyPy completed"
          
          # Security scanning
          python -m bandit -r . -f json -o bandit-results.json || echo "Bandit completed"

      - name: Run dependency security scans
        if: steps.service-check-complete.outputs.has_requirements == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "Running dependency security scans..."

          # Safety check for known vulnerabilities
          python -m safety check --json --output safety-results.json || echo "Safety scan completed"

          # Pip-audit for additional security checks
          python -m pip_audit --format=json --output=pip-audit-results.json || echo "Pip-audit completed"

      - name: Generate nightly summary
        run: |
          echo "## üåô Nightly Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ matrix.service.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Python Version:** ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Has Python Code:** ${{ steps.service-check.outputs.has_python }}" >> $GITHUB_STEP_SUMMARY
          echo "**Has Tests:** ${{ steps.service-check-complete.outputs.has_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "**Has Requirements:** ${{ steps.service-check-complete.outputs.has_requirements }}" >> $GITHUB_STEP_SUMMARY

  create-issue-on-failure:
    runs-on: ubuntu-latest
    needs: [check-recent-commits, comprehensive-tests]
    if: always() && needs.check-recent-commits.outputs.should_run == 'true' && needs.comprehensive-tests.result == 'failure'
    permissions:
      contents: read
      issues: write

    steps:
      - name: Create failure issue
        uses: actions/github-script@v8
        with:
          script: |
            const title = `üö® Nightly Tests Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `## üåô Nightly Test Failure Report
            
            **Date:** ${new Date().toISOString()}
            **Workflow:** Nightly Comprehensive Testing
            **Status:** ‚ùå Failed
            **Recent Commits:** ${{ needs.check-recent-commits.outputs.commit_count }}
            
            ### üìã Details
            - **Run ID:** ${{ github.run_id }}
            - **Run URL:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Triggered by:** ${{ github.event_name }}
            
            ### üîç Investigation Required
            Please review the failed workflow and address any issues found.
            
            ### üè∑Ô∏è Labels
            This issue was automatically created by the nightly testing workflow.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'nightly-failure', 'automated']
            });

  nightly-summary:
    runs-on: ubuntu-latest
    needs: [check-recent-commits, comprehensive-tests]
    if: always()
    permissions:
      contents: read

    steps:
      - name: Nightly Results Summary
        run: |
          echo "## üåô Nightly Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "**Should Run:** ${{ needs.check-recent-commits.outputs.should_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Recent Commits:** ${{ needs.check-recent-commits.outputs.commit_count }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.check-recent-commits.outputs.should_run }}" = "true" ]; then
            echo "**Comprehensive Tests:** ${{ needs.comprehensive-tests.result }}" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.comprehensive-tests.result }}" = "success" ]; then
              echo "**Overall Status:** ‚úÖ All nightly tests passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Overall Status:** ‚ùå Nightly tests failed - issue created" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Overall Status:** ‚è≠Ô∏è Skipped (no recent commits)" >> $GITHUB_STEP_SUMMARY
          fi
